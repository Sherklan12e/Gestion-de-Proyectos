// <auto-generated />
using System;
using Api.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Persistencia.Migraciones
{
    [DbContext(typeof(GestionTareasDbContext))]
    [Migration("20241122020250_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ProyectoUsuario", b =>
                {
                    b.Property<Guid>("IdProyecto")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("char(36)");

                    b.HasKey("IdProyecto", "IdUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("ProyectoUsuario");
                });

            modelBuilder.Entity("biblioteca.Dominio.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("CreacionUsuario")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IdTicket")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Ticket")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Usuario")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("IdTicket");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("biblioteca.Dominio.Proyecto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreacionUsuario")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Proyecto");
                });

            modelBuilder.Entity("biblioteca.Dominio.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreacionUsuario")
                        .HasColumnType("char(36)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Proyecto")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProyectoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Usuario")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("biblioteca.Dominio.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreacionUsuario")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4aa9ef3e-5912-4cc8-bf0d-5d611e09c050"),
                            CreacionUsuario = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "juan@gmail.com",
                            FechaCreacion = new DateTime(2024, 11, 21, 23, 2, 49, 419, DateTimeKind.Local).AddTicks(782),
                            Nombre = "juan",
                            Password = "$2a$11$fMTNbZFO34/kLYo9J3798OIGybybfUEktufpi4R7bPjPAKuxVCRrG"
                        },
                        new
                        {
                            Id = new Guid("e4aa9dea-51b3-41a0-bae6-0265c211d8a8"),
                            CreacionUsuario = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "leon@gmail.com",
                            FechaCreacion = new DateTime(2024, 11, 21, 23, 2, 49, 579, DateTimeKind.Local).AddTicks(7157),
                            Nombre = "leon",
                            Password = "$2a$11$zYIYE.IVAjLDjsni3iLnd.8aaljjK8NZ8jGrDahw5mUVVb9M2t/22"
                        });
                });

            modelBuilder.Entity("ProyectoUsuario", b =>
                {
                    b.HasOne("biblioteca.Dominio.Proyecto", null)
                        .WithMany()
                        .HasForeignKey("IdProyecto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("biblioteca.Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("biblioteca.Dominio.Comentario", b =>
                {
                    b.HasOne("biblioteca.Dominio.Ticket", null)
                        .WithMany("Actividad")
                        .HasForeignKey("IdTicket");

                    b.HasOne("biblioteca.Dominio.Usuario", null)
                        .WithMany("ComentariosUsuario")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("biblioteca.Dominio.Ticket", b =>
                {
                    b.HasOne("biblioteca.Dominio.Proyecto", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ProyectoId");

                    b.HasOne("biblioteca.Dominio.Usuario", null)
                        .WithMany("TicketsAsignados")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("biblioteca.Dominio.Proyecto", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("biblioteca.Dominio.Ticket", b =>
                {
                    b.Navigation("Actividad");
                });

            modelBuilder.Entity("biblioteca.Dominio.Usuario", b =>
                {
                    b.Navigation("ComentariosUsuario");

                    b.Navigation("TicketsAsignados");
                });
#pragma warning restore 612, 618
        }
    }
}
